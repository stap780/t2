<% require "dotenv"; Dotenv.load(".env") %>
# Name of your application. Used to uniquely configure containers.
service: t2

image: panaet780/t2

servers:
  web:
    hosts:
      - 89.223.125.34
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

proxy:
  ssl: true
  host: avito.dizauto.ru

# Credentials for your image host.
registry:
  username: panaet780

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - AWS_ACCESS_KEY_ID
    - AWS_SECRET_ACCESS_KEY
    - AWS_ENDPOINT
    - AWS_REGION
    - AWS_BUCKET
    - DATABASE_URL
    - QUEUE_DATABASE_URL
    - CABLE_DATABASE_URL
    - CACHE_DATABASE_URL
    - POSTGRES_PASSWORD
    - POSTGRES_USER
    - POSTGRES_DB
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use t2-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: t2-postgres

    # Log everything from Rails
    RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "t2_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64
  args:
    RUBY_VERSION: 3.2.2

# Use accessory services (secrets come from .kamal/secrets).
accessories:
  postgres:
    image: postgres:15
    host: 89.223.125.34
    port: '127.0.0.1:5432:5432'
    env:
      clear:
        POSTGRES_USER: postgres
        POSTGRES_DB: t2_production
        # DB_HOST: 127.0.0.1
        # DB_PORT: 5432
      secret:
        - POSTGRES_PASSWORD
    files:
      - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
    directories:
      - data:/var/lib/postgresql/data